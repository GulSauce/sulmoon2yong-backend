name: Docker Hub Push & 개발 서버 EC2 배포

on:
    push:
        branches:
            - develop
    workflow_dispatch: # 수동 실행 이벤트 추가

jobs:
    build:
        name: 빌드 작업
        runs-on: ubuntu-latest

        env:
            SECRET_YML_CONTENT: ${{ secrets.SECRET_YML_CONTENT }}
            NEW_RELIC_YML: ${{ secrets.NEW_RELIC_YML }}
            JVM_XMS: ${{ secrets.DEVELOP_MIN_MEMORY }}
            JVM_XMX: ${{ secrets.DEVELOP_MAX_MEMORY }}
            DOCKER_ID: ${{ secrets.DOCKER_USERNAME }}
            DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
            DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_BACKEND_IMAGE_NAME }}

        steps:
            - name: 코드 체크아웃
              uses: actions/checkout@v4

            - name: JDK 17 설정
              uses: actions/setup-java@v4
              with:
                  distribution: 'temurin'
                  java-version: '17'

            - name: Gradle 설정
              uses: gradle/gradle-build-action@v2

            - name: application-secret.yml 등록
              run: |
                echo "${SECRET_YML_CONTENT}" > src/main/resources/application-secret.yml

            - name: Set up newrelic.yml
              run: |
                  echo "${NEW_RELIC_YML}" > newrelic/newrelic.yml

            - name: 환경 변수 설정
              run: |
                  echo "DOCKER_ID=${DOCKER_ID}" >> gradle.properties
                  echo "DOCKER_PASSWORD=${DOCKER_PASSWORD}" >> gradle.properties
                  echo "DOCKER_IMAGE_NAME=${DOCKER_IMAGE_NAME}" >> gradle.properties
                  echo "JVM_XMS=${JVM_XMS}" >> gradle.properties
                  echo "JVM_XMX=${JVM_XMX}" >> gradle.properties

            - name: Gradle로 빌드
              run: ./gradlew clean build

            - name: Docker Hub에 로그인
              run: echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_ID}" --password-stdin

            - name: Jib로 Docker 이미지 빌드 및 푸시
              run: ./gradlew jib -Ddocker.id="${DOCKER_ID}" -Ddocker.password="${DOCKER_PASSWORD}" -Ddocker.image.name="${DOCKER_IMAGE_NAME}"

    deploy:
        name: 개발 서버 배포 작업
        needs: build
        runs-on: ubuntu-latest

        env:
            # AWS 관련
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            EC2_INSTANCE_ID: ${{ secrets.DEVELOP_EC2_INSTANCE_ID }}
            AWS_REGION: ap-northeast-2
            # Docker 관련
            CONTAINER_NAME: sulmun2yong-develop-server
            DOCKER_ID: ${{ secrets.DOCKER_USERNAME }}
            DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
            DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_BACKEND_IMAGE_NAME }}:devLatest
            # MongoDB 관련
            MONGODB_URL: ${{ secrets.DEVELOP_MONGODB_URL }}
            MONGODB_DATABASE: ${{ secrets.DEVELOP_MONGODB_DATABASE }}
            # Spring Boot 관련
            FRONTEND_BASE_URL: http://localhost:3000
            BACKEND_BASE_URL: http://dev-api.sulmoon.io
            # New Relic 관련
            NEW_RELIC_APP_NAME: sulmun2yong-development

        steps:
            - name: Install AWS CLI
              run: |
                curl "https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                sudo ./aws/install

            - name: AWS 로그인
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: SSM으로 EC2에 배포
              run: |
                aws --no-cli-pager  ssm send-command \
                --document-name "AWS-RunShellScript" \
                --targets "Key=instanceIds, Values=${{ env.EC2_INSTANCE_ID }}" \
                --parameters '{"commands" : ["echo \"${{ secrets.DOCKER_PASSWORD }}\" | docker login -u \"${{ secrets.DOCKER_USERNAME }}\" --password-stdin", 
                "docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}", 
                "docker stop ${{ env.CONTAINER_NAME }} || true", 
                "docker rm ${{ env.CONTAINER_NAME }} || true", 
                "docker run -d --name ${{ env.CONTAINER_NAME }} -p 8080:8080 -e SPRING_DATA_MONGODB_URI=${{ env.MONGODB_URL }} -e SPRING_DATA_MONGODB_DATABASE=${{ env.MONGODB_DATABASE }} -e FRONTEND_BASE_URL=${{ env.FRONTEND_BASE_URL }} ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}", 
                "docker image prune -af"]}'
