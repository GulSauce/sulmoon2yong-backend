name: Docker Hub Push & 개발 서버 EC2 배포

on:
    push:
        branches:
            - develop
    workflow_dispatch: # 수동 실행 이벤트 추가

jobs:
    build:
        name: 빌드 작업
        runs-on: ubuntu-latest

        env:
            SECRET_YML_CONTENT: ${{ secrets.SECRET_YML_CONTENT }}
            DEPLOY_TYPE: dev

        steps:
            - name: 코드 체크아웃
              uses: actions/checkout@v2

            - name: JDK 17 설정
              uses: actions/setup-java@v2
              with:
                  distribution: 'temurin'
                  java-version: '17'

            - name: Gradle 설정
              uses: gradle/gradle-build-action@v2

            - name: Set up application-secret.yml
              run: |
                echo "${SECRET_YML_CONTENT}" > src/main/resources/application-secret.yml

            - name: 환경 변수 설정
              run: |
                  echo "DOCKER_ID=${{ secrets.DOCKER_USERNAME }}" >> gradle.properties
                  echo "DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}" >> gradle.properties
                  echo "DOCKER_IMAGE_NAME=${{ secrets.DOCKER_BACKEND_IMAGE_NAME }}" >> gradle.properties
                  echo "DEPLOY_TYPE=${DEPLOY_TYPE}" >> gradle.properties

            - name: Gradle로 빌드
              run: ./gradlew clean build

            - name: Docker Hub에 로그인
              run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            - name: Jib로 Docker 이미지 빌드 및 푸시
              run: ./gradlew jib -Ddocker.id="${{ secrets.DOCKER_USERNAME }}" -Ddocker.password="${{ secrets.DOCKER_PASSWORD }}" -Ddocker.image.name="${{ secrets.DOCKER_BACKEND_IMAGE_NAME }}"

    deploy:
        name: 개발 서버 배포 작업
        needs: build
        runs-on: ubuntu-latest

        env:
            CONTAINER_NAME: sulmun2yong-develop-server
            EC2_HOST: ${{ secrets.DEVELOP_EC2_HOST }}
            EC2_USER: ${{ secrets.EC2_USER }}
            EC2_KEY: ${{ secrets.DEVELOP_EC2_KEY }}
            DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_BACKEND_IMAGE_NAME }}:devLatest
            MONGODB_URL: ${{ secrets.DEVELOP_MONGODB_URL }}
            MONGODB_DATABASE: ${{ secrets.DEVELOP_MONGODB_DATABASE }}
            FRONTEND_BASE_URL: http://localhost:3000

        steps:
            - name: EC2에 배포
              uses: appleboy/ssh-action@v0.1.7
              with:
                  host: ${{ env.EC2_HOST }}
                  username: ${{ env.EC2_USER }}
                  key: ${{ env.EC2_KEY }}
                  debug: true
                  script: |
                      echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
                      docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
                      docker stop ${{ env.CONTAINER_NAME }} || true
                      docker rm ${{ env.CONTAINER_NAME }} || true
                      while docker ps -a | grep -q ${{ env.CONTAINER_NAME }}; do
                        sleep 1
                      done
                      docker run -d --name ${{ env.CONTAINER_NAME }} -p 8080:8080 \
                        -e SPRING_DATA_MONGODB_URI=${{ env.MONGODB_URL }} \
                        -e SPRING_DATA_MONGODB_DATABASE=${{ env.MONGODB_DATABASE }} \
                        -e FRONTEND_BASE-URL=${{ env.FRONTEND_BASE_URL }} \
                        ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
                      docker image prune -af
